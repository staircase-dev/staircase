name: CI Pipeline

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ${{matrix.sys.os}}
    strategy:
      matrix:
        sys:
          - { os: windows-latest, shell: pwsh }
          - { os: ubuntu-latest,  shell: bash  }
          - { os: macos-latest,   shell: bash  }
          
        python-version: ['3.7', '3.8', '3.9', '3.10']
    defaults:
      run:
        shell: ${{ matrix.sys.shell }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Upgrade pip
      run: |
        python -m pip install --upgrade pip
    - name: Install codecov
      run: |
        python -m pip install codecov
    - name: Install poetry (ubuntu, macos)
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "/Users/runner/.local/bin" >> $GITHUB_PATH
      if: ${{ matrix.sys.os != 'windows-latest'}}
    - name: Install poetry (windows)
      run: |
        (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -
        echo "C:\Users\runneradmin\AppData\Roaming\Python\Scripts\poetry" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      if: ${{ matrix.sys.os == 'windows-latest'}}
    - name: Install dependencies
      run: |
        echo $PATH
        poetry install
    - name: Lint with flake8
      run: poetry run flake8 ./staircase
    - name: Test with pytest
      run: |
        poetry run pytest ./tests --junitxml=junit/test-results-${{ matrix.python-version }}.xml --cov=staircase --cov-report=xml
        codecov
    - name: Upload pytest test results
      uses: actions/upload-artifact@v2
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true

      
